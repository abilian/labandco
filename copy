#!/usr/bin/env python
import os
import shutil
from pathlib import Path

from gitignore_parser import parse_gitignore

all_files = Path("../labster").rglob("**/*")
all_files = sorted(list(all_files))

blacklist = [
    'front/node_modules',
    'front/dist',
    '.git',
    '.tox',
    '.idea',
    '__pycache__',
    # Sensitive stuff
    'fabfile.py',
    'Makefile',
    'tasks.py',
    'front/.npmrc',
    'boot',
    'doc',
    'annuaire',
    'etc',
    'restheart',
    'copy.py',
    'copy',
    'setup.py',
    'README-private.md',
    'INSTALL.txt',
    'Dockerfile',
    'CHANGES.rst',
    'instance',
    # Experimental
    'exoframe.json',
    'splinter',
    # Old
    'labster/templates',
    'labster/blueprints/admin',
    'labster/blueprints/bi',
    'labster/blueprints/demandes',
    'labster/blueprints/notifications',
    'labster/blueprints/rest_api',
    'labster/boot',
    'labster/static',
    'labster/ldap',
    # 'labster/forms',
    'migrations',
    'scripts',
]

whitelist = [
    'labster/templates/emails',
    'labster/templates/v3.j2',
]

keeplist = [
    ".idea",
    ".git",
    ".gitignore",
    "copy",
    ".venv",
]

matcher = parse_gitignore('.gitignore')


def is_blacklisted(path):
    return any(path.startswith(prefix) for prefix in blacklist)


def is_whitelisted(path):
    return any(path.startswith(prefix) for prefix in whitelist)


def is_gitignored(path):
    return matcher("/Users/fermigier/projects/labandco-su/" + path)


excluded = set()
keep = set()

for p in all_files:
    new_path = "/".join(p.parts[2:])

    if not is_whitelisted(new_path):

        if is_blacklisted(new_path):
            excluded.add(new_path)
            continue

        if is_gitignored(new_path):
            # print(f"gitignored: {new_path}")
            excluded.add(new_path)
            continue

        skip = False
        for p2 in excluded:
            if new_path.startswith(p2):
                skip = True
                break

        if skip:
            continue

    keep.add(new_path)

    if p.is_dir():
        if not Path(new_path).exists():
            os.mkdir(new_path)

    else:
        src_blob = p.open("rb").read()
        if Path(new_path).exists():
            dst_blob = Path(new_path).open("rb").read()
        else:
            dst_blob = None

        if src_blob != dst_blob:
            print(f"Copying: {new_path}")
            shutil.copyfile(str(p), new_path)

    # shutil.copyfile()


dst_files = Path(".").rglob("**/*")
dst_files = sorted(list(dst_files), reverse=True)


for p in dst_files:
    if str(p) in keep:
        continue

    skip = False
    for k in keeplist:
        if str(p).startswith(k):
            skip = True
            break

    if skip:
        continue

    if p.is_file():
        print(f"Removing file: {p}")
        p.unlink()

    elif p.is_dir() and not list(p.iterdir()):
        print(f"Removing dir : {p}")
        p.rmdir()
